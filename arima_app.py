# -*- coding: utf-8 -*-
"""arima_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13kQQOHfGjMc5lj1Q5ujn8CCRx_3bM1wH
"""

import pickle
import streamlit as st
import yfinance as yf
import pandas as pd
from datetime import datetime
import matplotlib.pyplot as plt

# Load ARIMA model
model_file = 'arima_model.pkl'
try:
    with open(model_file, 'rb') as f:
        model = pickle.load(f)
    st.success("ARIMA model loaded successfully.")
except Exception as e:
    st.error(f"Error loading ARIMA model: {e}")

def show_graph(forecast_df):
    end_date = datetime.today().strftime('%Y-%m-%d')
    start_date = (datetime.today().replace(year=datetime.today().year - 5)).strftime('%Y-%m-%d')
    historical_data = yf.download("ICICIBANK.NS", start=start_date, end=end_date)
    historical_data.columns = historical_data.columns.droplevel('Ticker')
    historical_data.columns.name = None
    historical_data = historical_data.reset_index()
    
    plt.figure(figsize=(15, 8))
    plt.plot(historical_data['Date'], historical_data['Close'], color='blue', label='Historical Data')
    plt.plot(forecast_df['Date'], forecast_df['Forecasted values org'], color='red', label='Forecasted Data')
    plt.title('ICICI stock price Trend Over Time')
    plt.xlabel('Date')
    plt.ylabel('Price')
    plt.legend()
    st.pyplot(plt)

def extract_last_close_value():
    """
    Extract the last close price from Yahoo Finance data.
    """
    data = yf.download("ICICIBANK.NS", period="5d")
    last_close = data.iloc[-2, 0]  # -1 -> today's data, -2 -> yesterday's data
    last_date = data.index[-2]
    return last_close, last_date

def predict(forecasting_date):
    """
    Predict the stock prices up to the given forecasting date using the ARIMA model.
    """
    start_date = pd.Timestamp.today().normalize()
    end_date = forecasting_date
    business_days = pd.date_range(start=start_date, end=end_date, freq='B')
    forecast = model.forecast(steps=len(business_days))
    forecast_df = pd.DataFrame({'Date': business_days, 'Forecasted values': forecast.values})

    last_close, last_date = extract_last_close_value()
    new_row = {'Date': last_date, 'Forecasted values': last_close}
    new_row_df = pd.DataFrame([new_row])
    forecast_df = pd.concat([new_row_df, forecast_df], ignore_index=True)

    forecast_df['Forecasted values org'] = forecast_df['Forecasted values'].cumsum()
    forecast_df = forecast_df.iloc[1:, :].reset_index(drop=True)
    return forecast_df.iloc[-1, -1], forecast_df['Forecasted values'].sum(), forecast_df.iloc[:, [0, 2]]

def main():
    """
    Main Streamlit app interface.
    """
    st.markdown("<h1 style='text-align: center;'>Stock Market Prediction for ICICI Bank</h1>", unsafe_allow_html=True)
    st.image('stock_market_graph_image.jpg', width=700, use_column_width=None, clamp=False, channels='RGB', output_format='auto')
    st.markdown("<h2 style='text-align: center;'>Insert the date for which you want to predict the stock close price</h2>", unsafe_allow_html=True)

    # User input for forecasting date
    forecasting_date = st.date_input("Enter the date", min_value=pd.Timestamp.today().normalize())

    if st.button("Predict"):
        value, change, forecast_df = predict(forecasting_date)

        # Display predicted value and changes
        st.divider()
        st.markdown("<h2 style='text-align: center;'>Predicted close value and change in the close value</h2>", unsafe_allow_html=True)
        st.metric("ICICI Bank Stock for "+str(forecasting_date), value=str(value), delta=str(change), delta_color="normal")
        st.divider()

        # Display forecasted data
        st.markdown("<h2 style='text-align: center;'>DataFrame for the forecasted values till the entered date</h2>", unsafe_allow_html=True)
        st.dataframe(forecast_df, use_container_width=True)
        st.markdown("<h2 style='text-align: center;'>Line plot</h2>", unsafe_allow_html=True)
        show_graph(forecast_df)

if __name__ == '__main__':
    main()